"use strict";(self.webpackChunkjohnnyreilly_com=self.webpackChunkjohnnyreilly_com||[]).push([[33789],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(f,a(a({ref:t},p),{},{components:r})):n.createElement(f,a({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},62896:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});r(67294);var n=r(3905);function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o.apply(this,arguments)}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const a={slug:"prettier-your-csharp-with-dotnet-format-and-lint-staged",title:"dotnet-format: Prettier your C# with lint-staged & husky",authors:"johnnyreilly",image:"./title-image.png",tags:["Prettier","dotnet-format"],hide_table_of_contents:!1},l=void 0,s={permalink:"/prettier-your-csharp-with-dotnet-format-and-lint-staged",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/2020-12-22-prettier-your-csharp-with-dotnet-format-and-lint-staged/index.md",source:"@site/blog/2020-12-22-prettier-your-csharp-with-dotnet-format-and-lint-staged/index.md",title:"dotnet-format: Prettier your C# with lint-staged & husky",description:"Consistent formatting in a codebase is a good thing. We can achieve this in dotnet using dotnet format, used in combination with the npm packages husky and lint-staged. This post shows how.",date:"2020-12-22T00:00:00.000Z",formattedDate:"December 22, 2020",tags:[{label:"Prettier",permalink:"/tags/prettier"},{label:"dotnet-format",permalink:"/tags/dotnet-format"}],readingTime:4.375,hasTruncateMarker:!0,authors:[{name:"John Reilly",title:"OSS Engineer - TypeScript, Azure, React, Node.js, .NET",url:"https://johnnyreilly.com/about",imageURL:"https://johnnyreilly.com/img/profile.jpg",key:"johnnyreilly"}],frontMatter:{slug:"prettier-your-csharp-with-dotnet-format-and-lint-staged",title:"dotnet-format: Prettier your C# with lint-staged & husky",authors:"johnnyreilly",image:"./title-image.png",tags:["Prettier","dotnet-format"],hide_table_of_contents:!1},prevItem:{title:"Azure Pipelines meet Jest",permalink:"/azure-pipelines-meet-jest"},nextItem:{title:"Make Microsoft.Identity.Web respond with 403 forbidden instead of a 302 redirect",permalink:"/how-to-make-azure-ad-403"}},c={image:r(87158).Z,authorsImageUrls:[void 0]},p=[],u={toc:p};function d(e){var{components:t}=e,a=i(e,["components"]);return(0,n.kt)("wrapper",o({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Consistent formatting in a codebase is a good thing. We can achieve this in dotnet using ",(0,n.kt)("inlineCode",{parentName:"p"},"dotnet format"),", used in combination with the npm packages ",(0,n.kt)("inlineCode",{parentName:"p"},"husky")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"lint-staged"),". This post shows how."),(0,n.kt)("p",null,(0,n.kt)("img",{loading:"eager",fetchpriority:"high",alt:"title image reading &quot;dotnet-format: Prettier your CSharp with lint-staged and husky&quot; and the dotnet-format logo",src:r(87158).Z,width:"1600",height:"900"})))}d.isMDXComponent=!0},87158:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/title-image-7fc4956ba503155ee49cece0524868fc.png"}}]);